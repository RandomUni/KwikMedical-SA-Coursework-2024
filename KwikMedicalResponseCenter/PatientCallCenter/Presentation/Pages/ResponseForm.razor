 @page "/"
 @inject NavigationManager NavigationManager 
 @inject AppState AppState
@using Microsoft.AspNetCore.Components.Forms


<EditForm Model=@ThisReq  OnValidSubmit=@createReq >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h3>Report an incident</h3>
    <div>In case name or NHS cannot be entered, for example unconscious person with no id,
        describe the condition to the best of your ability and put 1 for severity</div>
    <hr />
    <label style="color:orangered"   id="Non_allocable_sev">
        Please provide condition, message or severity for the case! </label>
    <div class="form-group row">
        <label for="PatientName" class="col-sm-5 col-form-label">
            Patient's Name (Optional with NHS number)
        </label>
        <div class="col-sm-5">
            <label for="PatientName" class="col-sm-5 col-form-label">
                Patients Name
            </label>
            <InputText id="PatientName" class="form-control" placeholder="Patient's Name" @bind-Value="ThisReq.PatientName" />
        </div>
    </div>
    <div class="form-group row">
        <label for="NHS number" class="col-sm-5 col-form-label">
            NHS Number
        </label>
        <div class="col-sm-5">
            <InputText id="NHS Number" class="form-control" placeholder="NHS Number" @bind-Value="ThisReq.NHSNumber" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Incident's  Location" class="col-sm-5 col-form-label">
            Incident's  Location
        </label>
        <div class="col-sm-5">
            <InputText id="Incident's  Location" class="form-control" placeholder="Incident's  Location" @bind-Value="ThisReq.Address" />
            <ValidationMessage For="() => ThisReq.Address" class="text-danger d-block" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Condition" class="col-sm-5 col-form-label">
            Medical Condition (Optional)
        </label>
        <div class="col-sm-5">
            <InputText id="Condition" class="form-control" placeholder="Medical Condition" @bind-Value="ThisReq.Condition" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Severity" class="col-sm-10 col-form-label">
            Condition's Severity 1-4 (Numerical, 1 being most severe) Only needed if cannot be calculated based on Condition or message
            Can be used to fast-track calculation, if can be clearly discerned by first-responders
        </label>
        <div class="col-sm-2">
            <InputNumber id="Severity" class="form-control" placeholder="Severity" @bind-Value="ThisReq.SeverityInt" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Message" class="col-sm-5 col-form-label">
            (Optional)
            Message about the condition, only needed to discern severity and for QA improvements
            Can be omitted if condition or severity is clear
        </label>
        <div class="col-sm-5">
            <InputText id="Message" class="form-control" placeholder="Message" @bind-Value="ThisReq.Message" />
        </div>
    </div>
    <input type="submit" value="Submit" class="btn btn-primary"/>
</EditForm>

@code
{
    Req ThisReq = new Req();

    private void createReq(EditContext editContext)
    {
        Req newReq = new Req(ThisReq.SeverityInt, ThisReq.Message, ThisReq.Condition, ThisReq.Address, ThisReq.NHSNumber, ThisReq.PatientName);
        FormState state = FormHandler.SubmitForm(newReq);
        AppState.Req = newReq;
        if (state == FormState.NAME_MISSMATCH) {
            NavigationManager.NavigateTo("/checkDetails");
        }
        if (state == FormState.NO_SEVERITY_ALLOCATED) {
            NavigationManager.NavigateTo("/addSeverity");
        }
        if (state == FormState.NO_SEVERITY_ALLOCATED)
        {
            NavigationManager.NavigateTo("/addSeverity");
        }
        if (state == FormState.SUCCESS)
        {
            AppState.Req = null;
            NavigationManager.NavigateTo("/success");
            MauiProgram.send(newReq.toJson(), null);
        }
        
    }
}

