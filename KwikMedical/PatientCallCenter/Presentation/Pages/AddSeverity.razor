 @page "/addSeverity"
 @inject AppState AppState
 @inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model=@ThisReq  OnValidSubmit=@submit >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label style="color:orangered"   id="Non_allocable_sev">
        Could not allocate severity automatically, please provide a number between 1-5, with 5 being the most severe condtion </label>
    <div class="form-group row">
        <label for="PatientName" class="col-sm-5 col-form-label">
            Patient's Name
        </label>
        <div class="col-sm-5">
            <InputText id="PatientName" class="form-control" placeholder="Patient's' Name" @bind-Value="ThisReq.PatientName" />
        </div>
    </div>
    <div class="form-group row">
        <label for="NHS number" class="col-sm-5 col-form-label">
            NHS Number
        </label>
        <div class="col-sm-5">
            <InputText id="NHS Number" class="form-control" placeholder="NHS Number" @bind-Value="ThisReq.NHSNumber" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Incident's  Location" class="col-sm-5 col-form-label">
            Incident's  Location
        </label>
        <div class="col-sm-5">
            <InputText id="Incident's  Location" class="form-control" placeholder="Incident's  Location" @bind-Value="ThisReq.Address" />
            <ValidationMessage For="() => ThisReq.Address" class="text-danger d-block" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Condition" class="col-sm-5 col-form-label">
            Medical Condition
        </label>
        <div class="col-sm-5">
            <InputText id="Condition" class="form-control" placeholder="Medical Condition" @bind-Value="ThisReq.Condition" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Severity" class="col-sm-10 col-form-label">
            Condition's Severity 1-5 (Numerical, 1 being most severe) Only needed if cannot be calculated based on Condition or message
            Can be used to fast-track calculation, if can be clearly discerned by first-responders
        </label>
        <div class="col-sm-2">
            <InputNumber id="Severity" class="form-control" placeholder="Severity" onInput @bind-Value="ThisReq.SeverityInt" />
            <ValidationMessage For="() => ThisReq.SeverityInt" class="text-danger" />
        </div>
    </div>
    <div class="form-group row"> 
        <label for="Message" class="col-sm-5 col-form-label">
            Message
            </label>
        <div class="col-sm-5">
            <InputText id="Message" class="form-control" placeholder="Message" @bind-Value="ThisReq.Message" />
        </div>
    </div>
    <input type="submit" value="Submit" class="btn btn-primary"/>
</EditForm>


@code
{

    public Req ThisReq {get; set;}
        
    protected override void OnInitialized()
    {
        if (AppState.Req is null) return;
        ThisReq = AppState.Req;
    }

    void submit(EditContext editContext)
    {
        Req newReq = new Req(ThisReq.SeverityInt, ThisReq.Message, ThisReq.Condition, ThisReq.Address, ThisReq.NHSNumber, ThisReq.PatientName);
        if(newReq.SeverityInt < 1 || newReq.SeverityInt > 5) {
            ValidationMessageStore messageStore = new ValidationMessageStore(editContext);
            messageStore.Add(() => newReq.SeverityInt, "Please select a number between 1 and 5");
            editContext.NotifyValidationStateChanged();
            return;
        }
        FormState state = FormHandler.SubmitForm(newReq);
        AppState.Req = newReq;
        if (state == FormState.NAME_MISSMATCH)
        {
            NavigationManager.NavigateTo("/checkDetails");
        }
        if (state == FormState.SUCCESS)
        {
            AppState.Req = null;
            NavigationManager.NavigateTo("/success");
        }
    }
}
